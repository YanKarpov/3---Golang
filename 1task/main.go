// ## Задание 1
// Конкурентно увеличить значение глобальной переменной 5 раз на 1.
// 1. Создать глобальную переменную числового типа
// 2. В функции main запустить 5 горутин, каждая из которых увеличивает значение переменных из пунка 1.
// на 1 единицу.
// 3. Синхронизировать горутины с помощью примитива синхронизации mutex

package main

import (
	"fmt"
	"sync" 
	"time" 
)

var counter int           
var mutex sync.Mutex      

// Функция для увеличения счётчика
func increment(id int, wg *sync.WaitGroup) {
	defer wg.Done()  
	for i := 0; i < 3; i++ {  // Каждая горутина будет увеличивать счётчик 3 раза
		mutex.Lock()    // Захват мьютекса, чтобы другие горутины не могли изменить счётчик
		counter++       
		fmt.Printf("Горутина %d увеличила счётчик до %d\n", id, counter)
		mutex.Unlock()  // Освобождаем мьютекс, чтобы другие горутины могли работать с счётчиком
		time.Sleep(100 * time.Millisecond)  
	}
}

func main() {
	var wg sync.WaitGroup  // Создаем объект WaitGroup для синхронизации горутин

	// Запускаем 5 горутин
	for i := 1; i <= 5; i++ {
		wg.Add(1)            
		go increment(i, &wg) 
	}

	wg.Wait() 

	// Выводим итоговое значение счётчика после выполнения всех горутин
	fmt.Println("Итоговое значение счётчика:", counter)
}
